= IMPORTANT CHANGES:

The attributes have been consolidated into one file, chef.rb, rather than split amongst chef.rb, client.rb, indexer.rb and server.rb.

== Client:

This cookbook no longer manages the chef package version, it manages /etc/chef/client.rb, restarts the service if the template changes, and can auto-validate a client if /etc/chef/validation_token exists.

== Server:

This cookbook no longer configures a Chef Server under Passenger. 

The default server recipe (chef::server) sets up the client (chef::client), manages the chef-indexer and chef-server services, and configures both from /etc/chef/server.rb. It also compacts the Chef database in CouchDB if it is over 100Mb.

The chef::server_proxy recipe sets up an Apache proxy vhost to provide SSL in front of the chef-server running as a Merb application.

= DESCRIPTION:

Use this cookbook to configure a chef client to connect to your preferred chef-server, or config a chef-server.

= REQUIREMENTS:

Chef v0.7.10, for attribute syntax.

== Platform:

Server is tested on Ubuntu 9.10, 9.04, 8.10 and 8.04, Debian 5.0.

Client is tested on the above, plus CentOS 5.3, Fedora 10, OpenBSD 4.6, FreeBSD 7.1 and Gentoo.

== Cookbooks:

Client: 

runit is suggested for RubyGem installations. No other cookbooks required for clients.

Server:

couchdb and stompserver are suggested for RubyGem installations. On systems where Chef and dependencies were installed from platform packages, CouchDB and Stompserver should be installed and configured sufficiently. Localised configuration requires additional changes to the server recipe and may require changes when using the Opscode recipes.

Server w/ Proxy:

* apache2 (opscode/cookbooks)

= ATTRIBUTES: 

== url_type

Set up the URLs the client should connect to with this. Default is 'http', which tells the client to connect to 'http://server:4000'. If you set up your chef-server to use an SSL front-end, set this to 'https' and the URLs will be 'https://server/'. 

== init_style

Specifies the init style to use. Default 'runit'. Other possible values 'init', 'bsd', any other string will be treated as unknown.

If your platform doesn't have a 'runit' package or if the cookbook doesn't detect it, but you stil want to use runit, set init_style to 'none' and install runit separately.

== path

This is the base location where chef will store its associated data. Default '/srv/chef' for RubyGems installed systems. The location preference varies by platform. The default is a filesystem hiearchy standard suggestion[1]. Some other locations you may consider, by platform:

Debian and Red Hat based Linux distros (Ubuntu, CentOS, Fedora, etc):

* /var/lib/chef

Any BSD and Gentoo:

* /var/chef

== run_path

Location for pidfiles on systems using init scripts. Default '/var/run/chef'.

If init_style is 'init', this is used, and should match what the init script itself uses for the PID files.

== cache_path

Location where the client will cache cookbooks and other data. Default is 'cache' underneath the bootstrap[:chef][:path] location. Some Linux distributions might prefer /var/cache/chef instead.

== serve_path

Used by the Chef server as the base location to "serve" cookbooks, roles and other assets. Default is /srv/chef.

== server_version, client_version

Set the version Chef. This is now unused in the chef cookbook but optionally override the opscode recipe with one that manages the specific version of Chef installed. Default is the latest Chef release.

== client_interval

Number of seconds to run chef-client periodically. Default '1800' (30 minutes).

== client_splay

Splay interval to randomly add to interval. Default '20'.

== log_dir

Directory where logs are stored if logs are not sent to STDOUT. Systems using runit should send logs to STDOUT as runit manages log output. Default '/var/log/chef'.

== client_log, indexer_log, server_log

Location of the client, indexer and server logs, respectively. Default 'STDOUT' on systems with runit, '/var/log/chef/{client,indexer,server}.log' on other systems.

== server_fqdn

Fully qualified domain name of the server. Default is the current node's fqdn as detected by Ohai. For clients, set this to the hostname of your environment's Chef Server.

== server_token

The validation_token used to automatically authorize chef-clients. Default is a random string generated every time chef-solo runs. Use chef-client -t 'validation_token' to automatically validate the client.

== server_ssl_req

Used by the server_proxy recipe, this attribute can be used to set up a self-signed SSL certificate automatically using openssl. Fields:

* C: country (two letter code)
* ST: state/province
* L: locality or city
* O: organization
* OU: organizational unit
* CN: canonical name, usually the fully qualified domain name of the server (FQDN)
* emailAddress: contact email address

= USAGE:

This cookbook is primarily designed to configure a Chef client or server with the /etc/chef/ configuration files. The services should be restarted when the config file changes.

== Passenger Not Used:

As mentioned above, Passenger is no longer used as the default.

== SSL Certificates: 

The default configuration sets up the server to use HTTPS. The server recipe will generate a self-signed PEM certificate on the first run. If you use opscode's chef-repo, you can use rake to generate your own site-specific certificate instead. You can also use a purchased certificate to replace the one generated through this cookbook, but it must be named by the fully qualified domain name unless the recipe is modified.

= LICENSE and AUTHOR:

Author:: Joshua Timberman <joshua@opscode.com>
Author:: Joshua Sierles <joshua@37signals.com>

Copyright 2008-2009, Opscode, Inc
Copyright 2009, 37signals

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
